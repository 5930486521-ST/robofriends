{"version":3,"sources":["component/Card.js","component/CardList.js","component/SearchBox.js","App.js","statemanagement/Actions.js","serviceWorker.js","statemanagement/Reducers.js","index.js"],"names":["Card","_ref","id","name","username","email","react_default","a","createElement","className","src","concat","alt","CardList","list","map","x","component_Card","key","SearchBox","handler","onChange","type","placeholder","aria-label","App","this","props","getList","_this","console","log","searchByNameList","filter","robot","toLowerCase","includes","searchField","SearchBox_SearchBox","onsearchChange","component_CardList","Component","connect","state","onSeachChangeReducer","getListReducer","isPending","dispatch","event","target","value","fetch","then","response","json","data","catch","err","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","searchFieldInitialState","getListInitialState","rootReducers","combineReducers","currentState","arguments","length","undefined","actionState","Object","assign","logger","createLogger","reduxStore","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","store","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b3a5827f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({id, name, username, email}) => {\r\n    return (<div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n        <img src={`https://robohash.org/${id}?size=200x200` } alt = \"not found\"></img>\r\n        <div>\r\n            <h2>{username}</h2>\r\n            <h3>Name: {name}</h3>\r\n            <h4>Email: {email}</h4>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nexport default Card;","import React from \"react\"\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({list}) =>{\r\n    return (<div>\r\n        {list.map((x)=><Card key={x.id} id={x.id} name={x.name} \r\n                                            username={x.username} email={x.email}></Card> )}\r\n    </div>);\r\n}\r\n\r\nexport default CardList","import React from \"react\"\r\n\r\nexport const SearchBox = ({handler}) =>{\r\n    return <div className = \"p2\">\r\n        <input onChange={handler} className=\"pa3 bs b--green bg-lightest-blue\"  \r\n                type=\"search\" placeholder=\"seach robots by name\" aria-label=\"search box for finging robots\"></input>\r\n    </div>\r\n}","import React, { Component} from \"react\";  \r\nimport CardList from \"./component/CardList\";\r\nimport {SearchBox} from \"./component/SearchBox\";\r\nimport \"./App.css\";\r\n\r\nimport {onsearchChangeAction,getListAction} from \"./statemanagement/Actions\"\r\nimport {connect} from \"react-redux\"\r\n\r\n// (connect from the state from store)\r\n//tell provider the name that we want for the props using obj(map) \r\nconst mapStateToProps = (state) => {\r\n    return{\r\n    searchField : state.onSeachChangeReducer.searchField,\r\n    list : state.getListReducer.list,\r\n    isPending : state.getListReducer.isPending\r\n}}\r\n\r\n//define the function that app.js is going to use and how it relate to Action\r\n//then tell provider the name that we want for the props using obj(map)\r\nconst mapDispatchToPros = (dispatch) =>{\r\n    return {\r\n            //onsearchChange is the function that recieve event\r\n    onsearchChange : (event) => dispatch(onsearchChangeAction(event.target.value)) , // related by the event value will use to set the action state\r\n    getList : () => dispatch(getListAction())\r\n}}\r\n\r\nclass App extends Component{\r\n\r\n    componentDidMount() {\r\n        this.props.getList();\r\n    }\r\n\r\n    render(){\r\n        console.log(this.props.list);\r\n        var searchByNameList = this.props.list.filter((robot) => (robot.name.toLowerCase()).includes(this.props.searchField.toLowerCase()));\r\n        return (<div className = \"tc\">\r\n            <h1 className = \"f1\">RoboFriends</h1>\r\n            <SearchBox handler = {this.props.onsearchChange}></SearchBox>\r\n            <CardList list={searchByNameList}></CardList>\r\n            </div>);         \r\n    }\r\n}\r\n        \r\nexport default connect(mapStateToProps,mapDispatchToPros)(App);  ","export const SEARCHFIELD_CHANGED = \"SEARCHFIELD_CHANGED\";\r\nexport const GET_LIST_PENDING = \"GET_LIST_PENDING\";\r\nexport const GET_LIST_SUCCESSED = \"GET_LIST_SUCCESSED\";\r\nexport const GET_LIST_FAILED = \"GET_LIST_FAILED\";\r\n\r\nexport const onsearchChangeAction = (text)=>{\r\n    var actionState = {type :SEARCHFIELD_CHANGED,  //typeOfState\r\n                         searchField : text};\r\n    return actionState;\r\n}\r\n\r\nexport const getListAction = () => (dispatch) =>{\r\n    dispatch({type:GET_LIST_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type:GET_LIST_SUCCESSED, list :data}))\r\n        .catch(err => dispatch({type:GET_LIST_FAILED, error: err}));\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {SEARCHFIELD_CHANGED,GET_LIST_PENDING,GET_LIST_SUCCESSED,GET_LIST_FAILED} from \"./Actions\"\r\n\r\nimport {combineReducers} from \"redux\";\r\n\r\nconst searchFieldInitialState = {\r\n    searchField :\"\"\r\n};\r\nconst onSeachChangeReducer = (currentState = searchFieldInitialState , actionState = {}) => {\r\n    switch(actionState.type){\r\n        case SEARCHFIELD_CHANGED:\r\n            return Object.assign({},currentState,{searchField:actionState.searchField});\r\n        default:\r\n            return currentState;\r\n    }\r\n}\r\n\r\nconst getListInitialState = {\r\n    list : [],\r\n    isPending: true\r\n};\r\n\r\nconst getListReducer = (currentState =getListInitialState, actionState = {} ) => {\r\n    switch (actionState.type){\r\n        case GET_LIST_PENDING:\r\n            return Object.assign({},currentState,{isPending:true})\r\n        case GET_LIST_SUCCESSED:\r\n            return Object.assign({},currentState,{isPending:false , list:actionState.list})\r\n        case GET_LIST_FAILED:\r\n            return Object.assign({},currentState,{error:actionState.error})\r\n        default:\r\n             return currentState;\r\n    }\r\n}\r\n\r\nexport const rootReducers = combineReducers({onSeachChangeReducer,getListReducer});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\"\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\"\n\nimport {rootReducers} from \"./statemanagement/Reducers\"\nimport {createStore,applyMiddleware} from \"redux\";\n\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\n\nimport {Provider} from \"react-redux\";\n\nconst logger = createLogger();\n\n\nconst reduxStore = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(<Provider store = {reduxStore}> \n                    <App/>\n                </Provider>, document.getElementById('root'));  \n\n\nserviceWorker.register();\n"],"sourceRoot":""}